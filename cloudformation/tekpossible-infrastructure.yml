AWSTemplateFormatVersion: 2010-09-09
Resources:
  # Network Resouce Definitions 
  TekPossibleVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.84.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: TekPossibleVPC

  TekPossibleDevelopment:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2a
      VpcId: !Ref TekPossibleVPC
      CidrBlock: 10.84.68.0/24
      Tags:
        - Key: Name
          Value: TekPossibleDevelopmentSubnet

  TekPossibleTest:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2a
      VpcId: !Ref TekPossibleVPC
      CidrBlock: 10.84.84.0/24
      Tags:
        - Key: Name
          Value: TekPossibleTestSubnet

  TekPossibleProduction:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2a
      VpcId: !Ref TekPossibleVPC
      CidrBlock: 10.84.80.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TekPossibleProductionSubnet

  TekPossibleIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TekPossibleIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TekPossibleVPC
      InternetGatewayId: !Ref TekPossibleIGW

  TekPossibleVPCRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TekPossibleVPC

  TekPossiblePublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TekPossibleVPCRouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref TekPossibleIGW

  TekPossibleVPCRouteTablePublicAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TekPossibleProduction
      RouteTableId: !Ref TekPossibleVPCRouteTablePublic

  TekPossibleNATGWEIP:    
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref TekPossibleVPC
      Tags:
        - Key: Name
          Value: TekPossibleNATGWEIP

  TekPossibleNATGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt TekPossibleNATGWEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref TekPossibleProduction
      Tags:
        - Key: Name
          Value: TekPossibleNATGW

  TekPossibleVPCRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TekPossibleVPC

  TekPossiblePrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TekPossibleVPCRouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref TekPossibleNATGW

  TekPossibleVPCRouteTablePrivateDevAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TekPossibleDevelopment
      RouteTableId: !Ref TekPossibleVPCRouteTablePrivate

  TekPossibleVPCRouteTablePrivateTestAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TekPossibleTest
      RouteTableId: !Ref TekPossibleVPCRouteTablePrivate

  # Development Compute Resource Definitions
  TekPossibleDevEC2MattermostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: TekPossibleDevEC2MattermostSecurityGroup
      GroupDescription: Security Group for Mattermost Development Instance
      VpcId: !Ref TekPossibleVPC
      SecurityGroupIngress:
        - IpProtocol: tcp # SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 10.84.68.0/24

        - IpProtocol: tcp  # HTTP
          FromPort: 80
          ToPort: 80
          CidrIp: 10.84.68.0/24

        - IpProtocol: tcp # HTTPS-MATTERMOST
          FromPort: 443
          ToPort: 443
          CidrIp: 10.84.68.0/24

        - IpProtocol: tcp # HTTPS-MGMT-CONSOLE
          FromPort: 8065
          ToPort: 8065
          CidrIp: 10.84.68.0/24

  TekPossibleDevEC2SSHOnlySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: TekPossibleDevEC2SSHOnlySecurityGroup
      GroupDescription: Security Group for EC2 with only SSH Access
      VpcId: !Ref TekPossibleVPC
      SecurityGroupIngress:
        - IpProtocol: tcp # SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 10.84.68.0/24

  TekPossibleDevRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: TekPossibleDevRDSSecurityGroup
      GroupDescription: Security Group for RDS Database Development Access
      VpcId: !Ref TekPossibleVPC
      SecurityGroupIngress:
        - IpProtocol: tcp # SSH
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.84.68.0/24

  TekPossibleDevEC2Mattermost:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: ansible-keypair # TODO: NEED TO MAKE THIS A PARAMETER
      DisableApiTermination: false
      ImageId: ami-0ef50c2b2eb330511 # TODO: NEED TO MAKE THIS A PARAMETER
      InstanceType: t3.large
      Monitoring: true
      SubnetId: !Ref TekPossibleDevelopment
      SecurityGroupIds:
        - !Ref TekPossibleDevEC2MattermostSecurityGroup
      Tags:
        - Key: Name
          Value: TekPossibleDevEC2Mattermost

  TekPossibleDevEC2Tailscale:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: ansible-keypair # TODO: NEED TO MAKE THIS A PARAMETER
      DisableApiTermination: false
      ImageId: ami-0ef50c2b2eb330511 # TODO: NEED TO MAKE THIS A PARAMETER
      InstanceType: t2.micro
      Monitoring: true
      SubnetId: !Ref TekPossibleDevelopment
      # UserData: !Base64 | # TODO: NEED TO FIGURE OUT HOw TO SCRIPT THE TAILSCALE INSTALL
      #   #!/bin/bash -ex
      #   # put your script here
      SecurityGroupIds:
        - !Ref TekPossibleDevEC2SSHOnlySecurityGroup
      Tags:
        - Key: Name
          Value: TekPossibleDevEC2Tailscale

  TekPossibleDevEC2IaC:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: ansible-keypair # TODO: NEED TO MAKE THIS A PARAMETER
      DisableApiTermination: false
      ImageId: ami-0ef50c2b2eb330511 # TODO: NEED TO MAKE THIS A PARAMETER
      InstanceType: t2.micro
      Monitoring: true
      SubnetId: !Ref TekPossibleDevelopment
      # UserData: !Base64 | # TODO: NEED TO FIGURE OUT HOw TO SCRIPT THE ANSIBLE/COLLECTIONS INSTALL
      #   #!/bin/bash -ex
      #   # put your script here
      SecurityGroupIds:
        - !Ref TekPossibleDevEC2SSHOnlySecurityGroup
      Tags:
        - Key: Name
          Value: TekPossibleDevEC2IaC

  # TekPossibleDevelopmentMattermostDB:
  #   Type: AWS::RDS::DBInstance
  #   Properties:
  #     AllocatedStorage: 100 # TODO: Parameterize this
  #     DBInstanceClass: db.m5.large # This is the smallest instance for RDS
  #     AllowMajorVersionUpgrade: true
  #     AutoMinorVersionUpgrade: true
  #     BackupRetentionPeriod: 7 # Backed up for 1 week
  #     CharacterSetName: utf8 # We will see if this works
  #     DBName: TekPossibleDevelopmentMattermostDB
  #     DBSubnetGroupName: !Ref TekPossibleDevelopment
  #     Engine: postgres
  #     LicenseModel: postgresql-license
  #     MasterUsername: postgres
  #     MasterUserSecret: <SOMETHING> # TODO: Figure out how to do this (most likely will be handled by ansible in the predeploy script)
  #     MultiAZ: false
  #     Port: 3306
  #     PubliclyAccessible: false
  #     StorageEncrypted: true
  #     StorageType: gp2
  #     VPCSecurityGroups:
  #       - !Ref TekPossibleDevRDSSecurityGroup
